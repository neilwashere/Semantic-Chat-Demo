@page "/orchestration"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using SemanticChatDemo.Features.Orchestration.Models
@using SemanticChatDemo.Features.Shared.Models
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@rendermode InteractiveServer

<div class="h-screen flex flex-col bg-gray-50 relative">
    <!-- Header -->
    <div class="bg-white shadow-sm border-b border-gray-200 px-6 py-4 flex-shrink-0">
        <h1 class="text-2xl font-semibold text-gray-900">Human-in-the-Loop Orchestration</h1>
        <p class="text-sm text-gray-600 mt-1">
            Participate in AI agent collaboration with guided workflow control
        </p>
    </div>

    <!-- Workflow Status Bar -->
    <div class="bg-blue-50 border-b border-blue-200 px-6 py-3 flex-shrink-0">
        <div class="flex items-center justify-between">
            <div class="flex items-center space-x-4">
                <div class="text-sm font-medium text-blue-800">Workflow Status:</div>
                @if (currentWorkflowState != null)
                {
                    <div class="flex items-center space-x-2">
                        <span class="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
                            @GetStageDisplayName(currentWorkflowState.CurrentStage)
                        </span>
                        <span class="text-sm text-blue-700">|</span>
                        <span class="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs font-medium">
                            @GetRoleDisplayName(currentWorkflowState.ActiveRole)
                        </span>
                        @if (currentWorkflowState.Iteration > 1)
                        {
                            <span class="text-sm text-blue-700">|</span>
                            <span class="text-xs text-blue-600">Iteration @currentWorkflowState.Iteration</span>
                        }
                    </div>
                }
                else
                {
                    <span class="text-sm text-gray-500">No active workflow</span>
                }
            </div>

            <!-- Team Selection -->
            <div class="flex items-center space-x-3">
                <label class="text-sm font-medium text-blue-800">Team:</label>
                <select @bind="selectedTeam" class="text-sm border border-blue-300 rounded px-2 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="copywriter">CopyWriter + Reviewer</option>
                    <option value="research">Researcher + Fact Checker</option>
                    <option value="debate">Advocate + Devil's Advocate</option>
                    <option value="technical">Architect + Code Reviewer</option>
                    <option value="test">Creative + Analytical</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Messages Area -->
    <div class="flex-1 overflow-y-auto p-6 space-y-4" id="orchestration-chat-container">
        @if (orchestrationMessages.Any())
        {
            @foreach (var message in orchestrationMessages)
            {
                <div class="@GetMessageContainerClass(message)">
                    <div class="@GetMessageBubbleClass(message)">
                        <!-- Message Header -->
                        @if (message.MessageType == "agent")
                        {
                            <div class="flex items-center space-x-2 mb-2">
                                <span class="text-lg">@GetAgentAvatar(message.AgentName)</span>
                                <span class="font-medium agent-name">@message.AgentName</span>
                                <span class="text-xs px-2 py-1 rounded-full bg-gray-100 text-gray-600">@GetAgentRole(message.AgentName)</span>
                                @if (message.IsStreaming)
                                {
                                    <span class="text-xs text-gray-500 flex items-center">
                                        <span class="animate-pulse">‚óè</span>
                                        <span class="ml-1">thinking...</span>
                                    </span>
                                }
                            </div>
                        }
                        else if (message.MessageType.StartsWith("system"))
                        {
                            <div class="flex items-center space-x-2 mb-2">
                                <span class="text-lg">@GetSystemIcon(message.MessageType)</span>
                                <span class="font-medium text-gray-600">System</span>
                                <span class="text-xs text-gray-500">@GetWorkflowStageIndicator(message)</span>
                            </div>
                        }
                        else if (message.MessageType == "human-input-request")
                        {
                            <div class="flex items-center space-x-2 mb-2">
                                <span class="text-lg">ü§î</span>
                                <span class="font-medium text-blue-600">Human Input Required</span>
                                <span class="text-xs px-2 py-1 rounded-full bg-yellow-100 text-yellow-800">@GetRoleDisplayName(message.SenderRole)</span>
                            </div>
                        }
                        else
                        {
                            <div class="flex items-center space-x-2 mb-2">
                                <span class="text-lg">üë§</span>
                                <span class="font-medium text-blue-600">@message.AgentName</span>
                            </div>
                        }

                        <!-- Message Content -->
                        <div class="whitespace-pre-wrap">@message.Content</div>

                        <!-- Human Input Panel (for human-input-request messages) -->
                        @if (message.MessageType == "human-input-request" && !string.IsNullOrEmpty(message.HumanInputRequestId))
                        {
                            <div class="mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                                <div class="mb-3">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Your Decision:</label>
                                    <div class="grid grid-cols-2 gap-2 mb-3">
                                        <button @onclick="() => ApproveDecision(message.HumanInputRequestId!)"
                                                class="px-3 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors text-sm">
                                            ‚úÖ Approve
                                        </button>
                                        <button @onclick="() => ShowRevisionDialog(message.HumanInputRequestId!)"
                                                class="px-3 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 transition-colors text-sm">
                                            üîÑ Request Revision
                                        </button>
                                    </div>
                                    <div class="grid grid-cols-2 gap-2">
                                        <button @onclick="() => ContinueDecision(message.HumanInputRequestId!)"
                                                class="px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors text-sm">
                                            ‚û°Ô∏è Continue
                                        </button>
                                        <button @onclick="() => CancelDecision(message.HumanInputRequestId!)"
                                                class="px-3 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors text-sm">
                                            ‚ùå Cancel
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <div class="text-center text-gray-500 py-12">
                <div class="text-lg font-medium">Ready for Human-in-the-Loop Orchestration</div>
                <div class="text-sm mt-2">Start a workflow below to begin guided AI collaboration.</div>
            </div>
        }
    </div>

    <!-- Revision Dialog -->
    @if (showRevisionDialog)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
                <h3 class="text-lg font-semibold mb-4">Request Revision</h3>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Revision Feedback:</label>
                    <textarea @bind="revisionFeedback"
                              placeholder="Describe what changes you'd like the agents to make..."
                              class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                              rows="4"></textarea>
                </div>
                <div class="flex space-x-3">
                    <button @onclick="() => SubmitRevision()"
                            class="flex-1 px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 transition-colors">
                        Submit Revision
                    </button>
                    <button @onclick="() => CancelRevision()"
                            class="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 transition-colors">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    }

    <!-- Input Area - Fixed at bottom -->
    <div class="fixed bottom-0 left-64 right-0 bg-white border-t border-gray-200 px-6 py-4 shadow-lg">
        <div class="flex space-x-4">
            <input @bind="taskInput"
                   @bind:event="oninput"
                   @onkeypress="HandleKeyPress"
                   @ref="taskInputRef"
                   placeholder="Describe a task for the agents to collaborate on..."
                   class="flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" />

            <button @onclick="ResetWorkflow"
                    disabled="@(currentWorkflowState == null)"
                    class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
                    title="Reset workflow">
                üîÑ
            </button>

            <button @onclick="StartWorkflow"
                    disabled="@(string.IsNullOrWhiteSpace(taskInput) || (currentWorkflowState != null && currentWorkflowState.CurrentStage != WorkflowStage.Completed))"
                    class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors">
                Start Workflow
            </button>
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<OrchestrationMessage> orchestrationMessages = new();
    private List<AgentConfiguration> currentAgents = new();
    private WorkflowState? currentWorkflowState;
    private string taskInput = string.Empty;
    private string selectedTeam = "copywriter";
    private ElementReference taskInputRef;

    // Revision dialog state
    private bool showRevisionDialog = false;
    private string revisionFeedback = string.Empty;
    private string? pendingRevisionRequestId;

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/orchestrationhub"))
            .ConfigureLogging(logging =>
            {
                logging.SetMinimumLevel(LogLevel.Information);
            })
            .Build();

        hubConnection.On<OrchestrationMessage>("ReceiveOrchestrationMessage", (message) =>
        {
            orchestrationMessages.Add(message);
            InvokeAsync(StateHasChanged);
            InvokeAsync(ScrollToBottom);
        });

        hubConnection.On<AgentStreamingMessage>("ReceiveAgentStreamingChunk", (streamingMessage) =>
        {
            HandleStreamingChunk(streamingMessage);
            InvokeAsync(StateHasChanged);
            InvokeAsync(ScrollToBottom);
        });

        hubConnection.On<WorkflowState>("WorkflowStateUpdate", (workflowState) =>
        {
            currentWorkflowState = workflowState;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<List<AgentConfiguration>>("AgentConfigurationsUpdate", (agentConfigs) =>
        {
            currentAgents = agentConfigs;
            InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            var errorMessage = new OrchestrationMessage
            {
                Content = $"Connection error: {ex.Message}",
                AgentName = "System",
                MessageType = "system-error",
                IsComplete = true
            };
            orchestrationMessages.Add(errorMessage);
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FocusInput();
        }
    }

    private async Task FocusInput()
    {
        try
        {
            await taskInputRef.FocusAsync();
        }
        catch
        {
            // Ignore focus errors
        }
    }

    private async Task StartWorkflow()
    {
        if (hubConnection is not null && !string.IsNullOrWhiteSpace(taskInput))
        {
            await hubConnection.SendAsync("StartHitlWorkflow", taskInput, selectedTeam);
            taskInput = string.Empty;
            await FocusInput();
        }
    }

    private async Task ResetWorkflow()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("ResetWorkflow");
            orchestrationMessages.Clear();
            currentWorkflowState = null;
            StateHasChanged();
            await FocusInput();
        }
    }

    private async Task SubmitDecision(string requestId, string decision, string? feedback)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SubmitHumanInput", requestId, decision, feedback);
        }
    }

    private async Task ApproveDecision(string requestId)
    {
        await SubmitDecision(requestId, "Approve", null);
    }

    private async Task ContinueDecision(string requestId)
    {
        await SubmitDecision(requestId, "Continue", null);
    }

    private async Task CancelDecision(string requestId)
    {
        await SubmitDecision(requestId, "Cancel", null);
    }

    private void ShowRevisionDialog(string requestId)
    {
        pendingRevisionRequestId = requestId;
        revisionFeedback = string.Empty;
        showRevisionDialog = true;
        StateHasChanged();
    }

    private async Task SubmitRevision()
    {
        if (!string.IsNullOrWhiteSpace(revisionFeedback) && !string.IsNullOrEmpty(pendingRevisionRequestId))
        {
            await SubmitDecision(pendingRevisionRequestId, "Revise", revisionFeedback);
            CancelRevision();
        }
    }

    private void CancelRevision()
    {
        showRevisionDialog = false;
        revisionFeedback = string.Empty;
        pendingRevisionRequestId = null;
        StateHasChanged();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await StartWorkflow();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "orchestration-chat-container");
    }

    private void HandleStreamingChunk(AgentStreamingMessage streamingMessage)
    {
        // Find existing streaming message or create a new one (like MultiAgent)
        var existingMessage = orchestrationMessages.FirstOrDefault(m =>
            m.Id == streamingMessage.MessageId);

        if (existingMessage != null)
        {
            // Update existing streaming message
            existingMessage.Content += streamingMessage.Content;
            existingMessage.IsComplete = streamingMessage.IsComplete;
            existingMessage.IsStreaming = !streamingMessage.IsComplete;
        }
    }

    // UI Helper Methods
    private string GetMessageContainerClass(OrchestrationMessage message)
    {
        return message.MessageType switch
        {
            "human-input-request" => "flex justify-center",
            var type when type.StartsWith("system") => "flex justify-center",
            _ => "flex justify-start"
        };
    }

    private string GetMessageBubbleClass(OrchestrationMessage message)
    {
        var baseClass = "max-w-4xl px-4 py-3 rounded-lg";

        return message.MessageType switch
        {
            "agent" => $"{baseClass} bg-white border shadow-sm {GetAgentColorScheme(message.AgentName)}",
            "human-input-request" => $"{baseClass} bg-yellow-50 border border-yellow-200",
            "system-error" => $"{baseClass} bg-red-100 text-red-800 border border-red-200",
            _ when message.MessageType.StartsWith("system") => $"{baseClass} bg-blue-50 text-blue-800 border border-blue-200",
            _ => $"{baseClass} bg-white border shadow-sm"
        };
    }

    private string GetAgentColorScheme(string agentName)
    {
        var agent = currentAgents.FirstOrDefault(a => a.Name.Equals(agentName, StringComparison.OrdinalIgnoreCase));
        return agent?.ColorScheme ?? "border-gray-200";
    }

    private string GetAgentAvatar(string agentName)
    {
        var agent = currentAgents.FirstOrDefault(a => a.Name.Equals(agentName, StringComparison.OrdinalIgnoreCase));
        return agent?.AvatarEmoji ?? "ü§ñ";
    }

    private string GetAgentRole(string agentName)
    {
        var agent = currentAgents.FirstOrDefault(a => a.Name.Equals(agentName, StringComparison.OrdinalIgnoreCase));
        return agent?.Description ?? "AI Agent";
    }

    private string GetSystemIcon(string messageType)
    {
        return messageType switch
        {
            "system-start" => "üöÄ",
            "system-progress" => "‚öôÔ∏è",
            "system-completion" => "‚úÖ",
            "system-revision" => "üîÑ",
            "system-continue" => "‚û°Ô∏è",
            "system-cancellation" => "‚ùå",
            "system-reset" => "üîÑ",
            "system-error" => "‚ö†Ô∏è",
            _ => "‚ÑπÔ∏è"
        };
    }

    private string GetWorkflowStageIndicator(OrchestrationMessage message)
    {
        return GetStageDisplayName(message.WorkflowStage);
    }

    private string GetStageDisplayName(WorkflowStage stage)
    {
        return stage switch
        {
            WorkflowStage.UserRequest => "User Request",
            WorkflowStage.AgentCollaboration => "Agent Collaboration",
            WorkflowStage.HumanReview => "Human Review",
            WorkflowStage.Decision => "Decision Point",
            WorkflowStage.Completed => "Completed",
            _ => stage.ToString()
        };
    }

    private string GetRoleDisplayName(ParticipantRole role)
    {
        return role switch
        {
            ParticipantRole.EndUser => "End User",
            ParticipantRole.Agent1 => "Agent 1",
            ParticipantRole.Agent2 => "Agent 2",
            ParticipantRole.HumanReviewer => "Human Reviewer",
            _ => role.ToString()
        };
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

<script>
    window.scrollToBottom = (elementId) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>
