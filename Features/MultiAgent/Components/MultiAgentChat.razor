@page "/agent-teams"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using SemanticChatDemo.Features.MultiAgent.Models
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@rendermode InteractiveServer

<div class="h-screen flex flex-col bg-gray-50 relative">
    <!-- Header -->
    <div class="bg-white shadow-sm border-b border-gray-200 px-6 py-4 flex-shrink-0">
        <h1 class="text-2xl font-semibold text-gray-900">Multi-Agent Orchestration</h1>
        <p class="text-sm text-gray-600 mt-1">
            Watch AI agents collaborate and deliberate in real-time
        </p>
    </div>

    <!-- Agent Status Bar -->
    <div class="bg-gray-100 border-b border-gray-200 px-6 py-3 flex-shrink-0">
        <div class="flex items-center justify-between flex-wrap gap-4">
            <div class="flex items-start space-x-6 flex-1 min-w-0">
                <div class="text-sm font-medium text-gray-700 whitespace-nowrap">Active Agents:</div>
                <div class="flex flex-wrap gap-4 flex-1">
                    @if (currentAgents.Any())
                    {
                        @foreach (var agent in currentAgents)
                        {
                            <div class="flex items-center space-x-2 bg-white rounded-lg px-3 py-2 shadow-sm border min-w-0">
                                <span class="text-lg flex-shrink-0">@agent.AvatarEmoji</span>
                                <div class="min-w-0 flex-1">
                                    <div class="flex items-center space-x-2">
                                        <span class="text-sm font-medium @GetAgentStatusNameClass(agent) truncate">@agent.Name</span>
                                        <span class="w-2 h-2 @GetAgentStatusDotClass(agent) rounded-full flex-shrink-0"></span>
                                    </div>
                                    <div class="text-xs text-gray-500 truncate" title="@agent.Description">@agent.Description</div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <span class="text-sm text-gray-500">No agents configured</span>
                    }
                </div>
            </div>

            <!-- Agent Team Selection -->
            <div class="flex items-center space-x-3 flex-shrink-0">
                <label class="text-sm font-medium text-gray-700">Team:</label>
                <select @bind="selectedTeam" @bind:after="OnTeamChanged" class="text-sm border border-gray-300 rounded px-2 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="test">Creative + Analytical</option>
                    <option value="copywriter">CopyWriter + Reviewer</option>
                    <option value="research">Researcher + Fact Checker</option>
                    <option value="debate">Advocate + Devil's Advocate</option>
                    <option value="technical">Architect + Code Reviewer</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Chat Messages Area -->
    <div class="flex-1 overflow-y-auto p-6 space-y-4 pb-24" id="agent-chat-container">
        @if (agentMessages.Any())
        {
            @foreach (var message in agentMessages)
            {
                <div class="@GetMessageContainerClass(message)">
                    <div class="@GetMessageBubbleClass(message)">
                        <!-- Agent Header -->
                        @if (message.MessageType == "agent")
                        {
                            <div class="flex items-center space-x-2 mb-2">
                                <span class="text-lg">@GetAgentAvatar(message.AgentName)</span>
                                <span class="font-medium agent-name">@message.AgentName</span>
                                <span class="text-xs px-2 py-1 rounded-full bg-gray-100 text-gray-600">@GetAgentRole(message.AgentName)</span>
                                @if (message.IsStreaming)
                                {
                                    <span class="text-xs text-gray-500 flex items-center">
                                        <span class="animate-pulse">‚óè</span>
                                        <span class="ml-1">thinking...</span>
                                    </span>
                                }
                            </div>
                        }
                        else if (message.MessageType == "user")
                        {
                            <div class="flex items-center space-x-2 mb-2">
                                <span class="text-lg">üë§</span>
                                <span class="font-medium text-blue-600">@message.AgentName</span>
                            </div>
                        }
                        else if (message.MessageType == "system")
                        {
                            <div class="flex items-center space-x-2 mb-2">
                                <span class="text-lg">‚öôÔ∏è</span>
                                <span class="font-medium text-gray-600">@message.AgentName</span>
                            </div>
                        }

                        <!-- Message Content -->
                        <div class="whitespace-pre-wrap">@message.Content</div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="text-center text-gray-500 py-8">
                <div class="text-lg font-medium">Ready for Agent Collaboration</div>
                <div class="text-sm mt-2">Start a conversation below to watch agents work together.</div>
            </div>
        }
    </div>

    <!-- Input Area - Fixed at bottom -->
    <div class="fixed bottom-0 left-64 right-0 bg-white border-t border-gray-200 px-6 py-4 shadow-lg">
        <div class="flex space-x-4">
            <input @bind="taskInput"
                   @bind:event="oninput"
                   @onkeypress="HandleKeyPress"
                   @ref="taskInputRef"
                   placeholder="Describe a task for the agents to work on..."
                   class="flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" />

            <button @onclick="ExportConversation"
                    disabled="@(!agentMessages.Any())"
                    class="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
                    title="Export conversation">
                üì•
            </button>

            <button @onclick="ClearConversation"
                    disabled="@(!agentMessages.Any())"
                    class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
                    title="Clear conversation">
                üóëÔ∏è
            </button>

            <button @onclick="StartAgentTask"
                    disabled="@(string.IsNullOrWhiteSpace(taskInput))"
                    class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors">
                Start Task
            </button>
        </div>
    </div>
</div>

@code {
    private HubConnection? _hubConnection;
    private List<AgentMessage> agentMessages = new();
    private List<AgentConfiguration> currentAgents = new();
    private string taskInput = string.Empty;
    private string selectedTeam = "test";
    private ElementReference taskInputRef;

    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/multiagenthub"))
            .ConfigureLogging(logging =>
            {
                logging.SetMinimumLevel(LogLevel.Information);
            })
            .Build();

        _hubConnection.On<AgentMessage>("ReceiveAgentMessage", (message) =>
        {
            agentMessages.Add(message);
            InvokeAsync(StateHasChanged);
            InvokeAsync(ScrollToBottom);
        });

        _hubConnection.On<AgentStreamingMessage>("ReceiveAgentStreamingChunk", (streamingMessage) =>
        {
            HandleStreamingChunk(streamingMessage);
            InvokeAsync(StateHasChanged);
            InvokeAsync(ScrollToBottom);
        });

        _hubConnection.On<List<AgentConfiguration>>("AgentStatusUpdate", (agents) =>
        {
            currentAgents = agents;
            InvokeAsync(StateHasChanged);
        });

        try
        {
            await _hubConnection.StartAsync();
            // Load default team agents on startup
            await LoadTeamAgents();
        }
        catch (Exception ex)
        {
            // Log the error and show a user-friendly message
            var errorMessage = new AgentMessage
            {
                Content = $"Connection error: {ex.Message}",
                AgentName = "System",
                MessageType = "error",
                IsComplete = true
            };
            agentMessages.Add(errorMessage);
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FocusInput();
        }
    }

    private async Task OnTeamChanged()
    {
        // Clear the current conversation when switching teams
        agentMessages.Clear();
        StateHasChanged();

        // Load the new team's agents
        await LoadTeamAgents();

        // Add a system message indicating team change
        var teamChangeMessage = new AgentMessage
        {
            Content = $"üîÑ Switched to {GetTeamDisplayName(selectedTeam)} team. Ready for new conversations.",
            AgentName = "System",
            MessageType = "system",
            IsComplete = true
        };
        agentMessages.Add(teamChangeMessage);
        StateHasChanged();
    }

    private string GetTeamDisplayName(string teamKey)
    {
        return teamKey.ToLowerInvariant() switch
        {
            "copywriter" => "CopyWriter + Reviewer",
            "test" => "Creative + Analytical",
            "research" => "Researcher + Fact Checker",
            "debate" => "Advocate + Devil's Advocate",
            "technical" => "Architect + Code Reviewer",
            _ => teamKey
        };
    }

    private async Task LoadTeamAgents()
    {
        if (_hubConnection is not null && IsConnected)
        {
            await _hubConnection.SendAsync("LoadTeamAgents", selectedTeam);
        }
    }

    private async Task FocusInput()
    {
        try
        {
            await taskInputRef.FocusAsync();
        }
        catch
        {
            // Ignore focus errors
        }
    }

    private async Task ClearConversation()
    {
        agentMessages.Clear();
        StateHasChanged();
        await FocusInput();
    }

    private async Task ExportConversation()
    {
        if (!agentMessages.Any()) return;

        try
        {
            var exportData = new
            {
                ExportedAt = DateTime.UtcNow,
                Team = GetTeamDisplayName(selectedTeam),
                AgentTeam = selectedTeam,
                Agents = currentAgents.Select(a => new { a.Name, a.Description, a.AvatarEmoji }).ToList(),
                MessageCount = agentMessages.Count,
                Conversation = agentMessages.Select(m => new
                {
                    m.AgentName,
                    m.MessageType,
                    m.Content,
                    Timestamp = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss UTC"),
                    Role = GetAgentRole(m.AgentName)
                }).ToList()
            };

            var json = System.Text.Json.JsonSerializer.Serialize(exportData, new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true
            });

            var fileName = $"agent-conversation-{selectedTeam}-{DateTime.UtcNow:yyyyMMdd-HHmmss}.json";
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, json);
        }
        catch (Exception ex)
        {
            // Add error message to conversation
            var errorMessage = new AgentMessage
            {
                Content = $"Failed to export conversation: {ex.Message}",
                AgentName = "System",
                MessageType = "error",
                IsComplete = true
            };
            agentMessages.Add(errorMessage);
            StateHasChanged();
        }
    }

    private async Task StartAgentTask()
    {
        if (_hubConnection is not null && !string.IsNullOrWhiteSpace(taskInput))
        {
            await _hubConnection.SendAsync("StartAgentConversation", taskInput, selectedTeam);
            taskInput = string.Empty;
            await FocusInput();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await StartAgentTask();
        }
    }

    private void HandleStreamingChunk(AgentStreamingMessage streamingMessage)
    {
        // Find existing streaming message or create a new one
        var existingMessage = agentMessages.FirstOrDefault(m =>
            m.Id == streamingMessage.MessageId);

        if (existingMessage != null)
        {
            // Update existing streaming message
            existingMessage.Content += streamingMessage.Content;
            existingMessage.IsComplete = streamingMessage.IsComplete;
            existingMessage.IsStreaming = !streamingMessage.IsComplete;
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "agent-chat-container");
    }

    private string GetMessageContainerClass(AgentMessage message)
    {
        return message.MessageType switch
        {
            "user" => "flex justify-end",
            "error" => "flex justify-center",
            "system" => "flex justify-center",
            _ => "flex justify-start"
        };
    }

    private string GetMessageBubbleClass(AgentMessage message)
    {
        var baseClass = "max-w-3xl px-4 py-3 rounded-lg";

        return message.MessageType switch
        {
            "user" => $"{baseClass} bg-blue-600 text-white",
            "error" => $"{baseClass} bg-red-100 text-red-800 border border-red-200",
            "system" => $"{baseClass} bg-gray-100 text-gray-700 border border-gray-200 text-center",
            _ => $"{baseClass} bg-white border shadow-sm {GetAgentColorScheme(message.AgentName)}"
        };
    }

    private string GetAgentColorScheme(string agentName)
    {
        var agent = currentAgents.FirstOrDefault(a => a.Name.Equals(agentName, StringComparison.OrdinalIgnoreCase));
        return agent?.ColorScheme ?? "border-gray-200";
    }

    private string GetAgentAvatar(string agentName)
    {
        var agent = currentAgents.FirstOrDefault(a => a.Name.Equals(agentName, StringComparison.OrdinalIgnoreCase));
        return agent?.AvatarEmoji ?? "ü§ñ";
    }

    private string GetAgentRole(string agentName)
    {
        var agent = currentAgents.FirstOrDefault(a => a.Name.Equals(agentName, StringComparison.OrdinalIgnoreCase));
        return agent?.Description ?? "AI Agent";
    }

    private string GetAgentStatusNameClass(AgentConfiguration agent)
    {
        // Use the agent's color scheme for the name in the status bar
        return agent.ColorScheme switch
        {
            "agent-creative" => "text-purple-600",
            "agent-analytical" => "text-green-600",
            "agent-copywriter" => "text-red-600",
            "agent-reviewer" => "text-blue-600",
            "agent-researcher" => "text-cyan-600",
            "agent-factchecker" => "text-green-600",
            "agent-advocate" => "text-orange-600",
            "agent-devils-advocate" => "text-rose-700",
            "agent-architect" => "text-violet-600",
            "agent-code-reviewer" => "text-gray-700",
            _ => "text-gray-600"
        };
    }

    private string GetAgentStatusDotClass(AgentConfiguration agent)
    {
        // Show active status with agent's theme color
        return agent.IsActive
            ? agent.ColorScheme switch
            {
                "agent-creative" => "bg-purple-500",
            "agent-analytical" => "bg-green-500",
                "agent-copywriter" => "bg-red-500",
                "agent-reviewer" => "bg-blue-500",
                "agent-researcher" => "bg-cyan-500",
                "agent-factchecker" => "bg-green-500",
                "agent-advocate" => "bg-orange-500",
                "agent-devils-advocate" => "bg-rose-600",
                "agent-architect" => "bg-violet-500",
                "agent-code-reviewer" => "bg-gray-600",
                _ => "bg-green-500"
            }
            : "bg-gray-400";
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}

<script>
    window.scrollToBottom = (elementId) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };

    window.downloadFile = (fileName, content) => {
        const element = document.createElement('a');
        const file = new Blob([content], { type: 'application/json' });
        element.href = URL.createObjectURL(file);
        element.download = fileName;
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
        URL.revokeObjectURL(element.href);
    };
</script>
